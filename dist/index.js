!function(e,t){if("object"==typeof exports&&"object"==typeof module)module.exports=t();else if("function"==typeof define&&define.amd)define([],t);else{var o=t();for(var i in o)("object"==typeof exports?exports:e)[i]=o[i]}}(this,(()=>(()=>{"use strict";var e={d:(t,o)=>{for(var i in o)e.o(o,i)&&!e.o(t,i)&&Object.defineProperty(t,i,{enumerable:!0,get:o[i]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r:e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})}},t={};e.r(t),e.d(t,{RxDBDatabaseConnector:()=>c,RxDBDatabaseTableConnector:()=>a});const o=require("rxdb"),i=require("rxdb/plugins/storage-dexie"),n=require("uuid");class c{dbKey;layout;db;collections={};constructor(e,t){this.dbKey=e,this.layout=t}async open(){this.db=await(0,o.createRxDatabase)({name:this.dbKey,storage:(0,i.getRxStorageDexie)()});const e={};Object.entries(this.layout).forEach((([t,o])=>{e[t]={schema:o}}));const t=await this.db.addCollections(e);Object.keys(this.layout).forEach((e=>{this.collections[e]=t[e]}))}async close(){await(this.db?.destroy()),this.collections={}}hasTable(e){return!!this.collections[e]}createTable(e){if(!this.hasTable(e))throw new Error(`Table ${e} is not predefined and cannot be created dynamically.`)}getTableConnector(e){if(!this.hasTable(e))throw new Error(`Table ${e} does not exist`);return new a(this.collections[e])}}class a{collection;constructor(e){this.collection=e}async get(e){const t=await this.collection.findOne(e).exec();return t?t.toJSON():void 0}async set(e,t){return await this.collection.upsert({...t,id:e}),{...t,id:e}}async add(e){const t=(0,n.v4)();return await this.collection.insert({...e,id:t}),{...e,id:t}}async delete(e){const t=await this.collection.findOne(e).exec();t&&await t.remove()}async clear(){await this.collection.remove()}async list(e){return this.collection.find().exec()}async count(e){return this.collection.count().exec()}async calculateSize(){return(await this.collection.find().exec()).reduce(((e,t)=>e+new Blob([JSON.stringify(t)]).size),0)}}return t})()));